from aiogram import Router, F, Bot
from aiogram.types import callback_query, CallbackQuery, LabeledPrice, Message, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.orm import AsyncORMfunctin
import keybords.inline_key as inline_key
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from typing import Optional

router_user_panel = Router()

class CreateNewCallbackDataChapter(CallbackData, prefix = 'chapter'):
    number_position: int
    
class CreateNewCallbackDataPosition(CallbackData, prefix = 'position_ordering'):
    number_ordering_position: int

@router_user_panel.callback_query(F.data == 'my_order') #–≤—ã–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∫–æ–Ω–µ—á–Ω–æ
async def my_order(callback: CallbackQuery):
        result = await AsyncORMfunctin.select_sum_order(int(callback.from_user.id))
        if result == 0:
            await callback.message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –≤—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –Ω–µ–∫–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤üíï')
        else:
            await AsyncORMfunctin.select_order_to_user()
            await callback.message.answer('—é—é—é')
            
@router_user_panel.callback_query(F.data == 'catalog_chapters') #–¥–∞–µ–º  –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–∞
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞', reply_markup = inline_key.user_panel)
    
@router_user_panel.callback_query(F.data == 'chapter_1_catalog') #–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_1')
    result = await AsyncORMfunctin.select_name_position('chapter_1')
    await callback.message.answer('–ö–∞—Ç–∞–ª–æ–≥ –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏', reply_markup = inline_key.create_keybord_catalog(result, result_id, CreateNewCallbackDataChapter))
    
@router_user_panel.callback_query(F.data == 'chapter_2_catalog') #–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_2')
    result = await AsyncORMfunctin.select_name_position('chapter_2')
    await callback.message.answer('–ö–∞—Ç–∞–ª–æ–≥ –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏', reply_markup = inline_key.create_keybord_catalog(result, result_id, CreateNewCallbackDataChapter))
    
@router_user_panel.callback_query(F.data == 'chapter_3_catalog') #–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑–¥–µ–ª
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_3')
    result = await AsyncORMfunctin.select_name_position('chapter_3')
    await callback.message.answer('–ö–∞—Ç–∞–ª–æ–≥ –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏', reply_markup = inline_key.create_keybord_catalog(result, result_id, CreateNewCallbackDataChapter))

@router_user_panel.callback_query(F.data == 'chapter_4_catalog') #–ø–æ–∫–∞–∑—ã–≤–µ–º —á—ë—Ç–≤–µ—Ä—Ç—ã–π —Ä–∞–∑–¥–µ–ª
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_4')
    result = await AsyncORMfunctin.select_name_position('chapter_4')
    await callback.message.answer('–ö–∞—Ç–∞–ª–æ–≥ –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏', reply_markup = inline_key.create_keybord_catalog(result, result_id, CreateNewCallbackDataChapter))

@router_user_panel.callback_query(F.data == 'return_chapter_catalog') #–æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞', reply_markup = inline_key.user_panel)
    
@router_user_panel.callback_query(F.data == 'return_user_menu') #–æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('üíï–ü—Ä–∏–≤–µ—Ç, –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ', reply_markup = inline_key.menu_type)
    
@router_user_panel.callback_query(CreateNewCallbackDataChapter.filter()) #—Å–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def create_new_callback_data(callback: CallbackQuery, callback_data: CreateNewCallbackDataChapter, bot = Bot):
    await callback.message.delete()
    result = await AsyncORMfunctin.select_full_ifo_position(callback_data.number_position)
    await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {result[0]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {result[1]}\n–º–∞—Å—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ø–æ—Ä—Ü–∏–∏: {result[2]}–≥\n\n–¶–µ–Ω–∞: {result[3]}—Ä', reply_markup = inline_key.create_keybord_position(callback_data.number_position, CreateNewCallbackDataPosition))
    
@router_user_panel.callback_query(F.data == 'return_position_catalog') #–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
async def my_order(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞', reply_markup = inline_key.user_panel)
    
@router_user_panel.callback_query(CreateNewCallbackDataPosition.filter()) #—Å–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def create_new_callback_data(callback: CallbackQuery, 
                                   callback_data: CreateNewCallbackDataPosition, bot = Bot):
    await callback.message.delete()
    result = await AsyncORMfunctin.select_full_ifo_position(callback_data.number_ordering_position)
    PRICE = LabeledPrice(label = result[0], amount = result[3]*100)
    
    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await callback.message.answer("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(callback.message.chat.id,
                           title = result[0],
                           description = result[1],
                           provider_token = PAYMENTS_TOKEN,
                           currency = "RUB",
                           photo_url = "https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                           photo_width = 416,
                           photo_height = 234,
                           photo_size = 416,
                           is_flexible = False,
                           prices = [PRICE],
                           start_parameter = "one-month-subscription",
                           payload = "test-invoice-payload")
    
@router_user_panel.message(F.successful_payment)
async def successful_payment(message: Message, callback_data: CreateNewCallbackDataPosition, bot = Bot):
    print("SUCCESSFUL PAYMENT:")
    await AsyncORMfunctin.insert_new_ordering(message.from_user.id, callback_data.number_ordering_position)
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
    f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –≤–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup = inline_key.return_user_panel)

