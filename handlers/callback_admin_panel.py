from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from database.orm import AsyncORMfunctin
from keybords import inline_key
from database.model import ChapterEnum
from aiogram.filters.callback_data import CallbackData

router_admin_panel = Router()

class StatePassword(StatesGroup):
    password = State()
    
class StatePosition(StatesGroup):
    name_pos = State()
    decription_pos = State()
    mass_pos = State()
    chapter_pos = State()
    praice_pos = State()
    
class StateNewAdmin(StatesGroup):
    id_new_admin = State()
    password_new_admin = State()
    name_new_user = State()
    
class StateUpdatePosition(StatesGroup):
    id_position = State()
    
    new_name_position = State()
    new_description_position = State()
    new_mass_position = State()
    new_praice_position = State()
    
class CreateNewCallbackData(CallbackData, prefix = 'position'):
    number_position: int
    
class CreateNewCallbackDataAdmin(CallbackData, prefix = 'admin'):
    number_admin: int
    
class CreateNewCallbackDataUpdate(CallbackData, prefix = 'update'):
    number_update_position: int

@router_admin_panel.callback_query(F.data == 'open_admin_panel') #–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def open_admin_panel(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—åüëáüèª')
    await state.set_state(StatePassword.password)
    
@router_admin_panel.callback_query(F.data == 'open_admin_panel_new') #–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def open_admin_panel_new(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞', reply_markup = inline_key.admin_panel)
    
@router_admin_panel.message(StatePassword.password) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
async def admin_password(message: Message, state: FSMContext):
    await state.update_data(password = message.text)
    passwords = await state.get_data()
    tru_password = await AsyncORMfunctin.select_password_user(message.from_user.id)
    await state.clear()
    if int(passwords['password']) == tru_password:
        # await message.answer('–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
        # time.sleep(2)
        # await message.answer('–†–∞–∑–≥–æ–Ω—è–µ–º –º–∏—Ç–∏–Ω–≥–∏ –ù–∞–≤–∞–ª—å–Ω–æ–≥–æ...')
        # time.sleep(2)
        # await message.answer('–ü–æ–¥–º–µ—Ç–∞–µ–º –º–∞–≤–∑–æ–ª–µ–π...')
        # time.sleep(2)
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞', reply_markup = inline_key.admin_panel)
    if int(passwords['password']) != tru_password:
        await state.set_state(StatePassword.password)
        await message.answer('–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑üêô')
        
@router_admin_panel.callback_query(F.data == 'close_admin_panel') #–∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def close_admin_panel(callback: CallbackQuery):
    await callback.message.delete()
    
@router_admin_panel.callback_query(F.data == 'add_position') #–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–∞–π—Å
async def add_position(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(StatePosition.name_pos)
    await callback.message.answer('–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞')
    
@router_admin_panel.message(StatePosition.name_pos) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –∏–º—è –ø–æ–∑–∏—Ü–∏–∏
async def add_position_name(message: Message, state: FSMContext):
    await state.update_data(name_pos = message.text)
    rev = await state.get_data()
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞')
    await state.set_state(StatePosition.decription_pos)
    
@router_admin_panel.message(StatePosition.decription_pos) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
async def add_position_description(message: Message, state: FSMContext):
    await state.update_data(decription_pos = message.text)
    await state.get_data()
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –æ–¥–Ω–æ–π –ø–æ—Ä—Ü–∏–∏')
    await state.set_state(StatePosition.mass_pos)
    
@router_admin_panel.message(StatePosition.mass_pos) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –º–∞—Å—Å—É
async def add_position_mass(message: Message, state: FSMContext):
    await state.update_data(mass_pos = message.text)
    await state.get_data()
    await message.answer('–ú–∞—Å—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–¥—É–∫—Ç–∞:\n\n\
–ú–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å\n–ü—Ä–æ—Ä–æ—Å—Ç–∫–∏\n–¶–≤–µ—Ç—ã\n–ë–µ–±–∏-–ª–∏—Å—Ç\n\n–í–≤–æ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –æ–Ω–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤')
    await state.set_state(StatePosition.chapter_pos)
    
@router_admin_panel.message(StatePosition.chapter_pos) #–ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–¥–µ–ª
async def add_position_chapter(message: Message, state: FSMContext):
    await state.update_data(chapter_pos = message.text)
    await state.get_data()
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–Ω—É –∑–∞ –ø–æ—Ä—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞')
    await state.set_state(StatePosition.praice_pos)
    
@router_admin_panel.message(StatePosition.praice_pos) #–ø—Ä–∏–Ω–∏–º–∞–µ–º —Ü–µ–Ω—É
async def add_position_praice(message: Message, state: FSMContext):
    await state.update_data(praice_pos = message.text)
    result = await state.get_data()
    await message.answer('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
    if result['chapter_pos'] == '–ú–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å':
        await AsyncORMfunctin.insert_new_position(result['name_pos'], result['decription_pos'], int(result['mass_pos']), ChapterEnum.chapter_1, int(result['praice_pos']))
    if result['chapter_pos'] == '–ü—Ä–æ—Ä–æ—Å—Ç–∫–∏':
        await AsyncORMfunctin.insert_new_position(result['name_pos'], result['decription_pos'], int(result['mass_pos']), ChapterEnum.chapter_2, int(result['praice_pos']))
    if result['chapter_pos'] == '–¶–≤–µ—Ç—ã':
        await AsyncORMfunctin.insert_new_position(result['name_pos'], result['decription_pos'], int(result['mass_pos']), ChapterEnum.chapter_3, int(result['praice_pos']))
    if result['chapter_pos'] == '–ë–µ–±–∏-–ª–∏—Å—Ç':
        await AsyncORMfunctin.insert_new_position(result['name_pos'], result['decription_pos'], int(result['mass_pos']), ChapterEnum.chapter_4, int(result['praice_pos']))
    await state.clear()
    await message.answer('–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—Éüëçüèø')
    await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)
    
@router_admin_panel.callback_query(F.data == 'delet_position') #–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
async def delet_position(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞', reply_markup = inline_key.position_panel)
    
@router_admin_panel.callback_query(F.data == 'microgreen') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏
async def answer_position_microgreen(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_1')
    result = await AsyncORMfunctin.select_name_position('chapter_1')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord(result, result_id, CreateNewCallbackData))
    
@router_admin_panel.callback_query(F.data == 'prorostki') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–æ—Ä–æ—Å—Ç–∫–æ–≤
async def answer_position_prorostki(callback: CallbackQuery): 
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_2')
    result = await AsyncORMfunctin.select_name_position('chapter_2')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord(result, result_id, CreateNewCallbackData))
    
@router_admin_panel.callback_query(F.data == 'flover') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Ü–≤–µ—Ç–æ–≤
async def answer_position_flover(callback: CallbackQuery): 
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_3')
    result = await AsyncORMfunctin.select_name_position('chapter_3')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord(result, result_id, CreateNewCallbackData))
    
@router_admin_panel.callback_query(F.data == 'bubilist') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –±–µ–±–∏-–ª–∏—Å—Ç–∞
async def answer_position_dudilist(callback: CallbackQuery): 
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_4')
    result = await AsyncORMfunctin.select_name_position('chapter_4')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord(result, result_id, CreateNewCallbackData))
    
@router_admin_panel.callback_query(CreateNewCallbackData.filter()) #—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
async def create_new_callback_data(callback: CallbackQuery, callback_data: CreateNewCallbackData):
    await callback.message.delete()
    await AsyncORMfunctin.delete_position({callback_data.number_position})
    await callback.message.answer(f'id —É–¥–∞–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: {callback_data.number_position}\n\n–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–∞ üçíüçíüçí')
    await callback.message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)

@router_admin_panel.callback_query(F.data == 'update_position') #–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
async def update_position(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup = inline_key.position_update_panel)

@router_admin_panel.callback_query(F.data == 'microgreen_update') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏
async def update_position_mecrogreen(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_1')
    result = await AsyncORMfunctin.select_name_position('chapter_1')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord_update(result, result_id, CreateNewCallbackDataUpdate))
    
@router_admin_panel.callback_query(F.data == 'prorostki_update') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–æ—Ä–æ—Å—Ç–∫–æ–≤
async def update_position_prorostki(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_2')
    result = await AsyncORMfunctin.select_name_position('chapter_2')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord_update(result, result_id, CreateNewCallbackDataUpdate))
    
@router_admin_panel.callback_query(F.data == 'flover_update') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Ü–≤–µ—Ç–æ–≤
async def update_position_flover(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_3')
    result = await AsyncORMfunctin.select_name_position('chapter_3')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord_update(result, result_id, CreateNewCallbackDataUpdate))
    
@router_admin_panel.callback_query(F.data == 'bubilist_update') #—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –±–µ–±–∏-–ª–∏—Å—Ç–∞
async def update_position_bubilist(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_id_position('chapter_4')
    result = await AsyncORMfunctin.select_name_position('chapter_4')
    await callback.message.answer('—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π', reply_markup = inline_key.create_keybord_update(result, result_id, CreateNewCallbackDataUpdate))
    
@router_admin_panel.callback_query(CreateNewCallbackDataUpdate.filter())
async def create_new_callback_update(callback: CallbackQuery, callback_data: CreateNewCallbackDataUpdate):
    await callback.message.delete()
    await callback.message.answer(f'id –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: {callback_data.number_update_position}\n\n–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –Ω–µ–π –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup = inline_key.update_panel)
    
@router_admin_panel.callback_query(F.data == 'name_update') #–∏–∑–º–µ–Ω—è–µ–º –∏–º—è –ø–æ–∑–∏—Ü–∏–∏
async def update_name_position(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StateUpdatePosition.id_position)
    await callback.message.answer('–•–æ—Ä—à–æ, –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–∑–∏—Ü–∏–∏')
    
@router_admin_panel.message(StateUpdatePosition.id_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º id
async def update_name_position_id(message: Message, state: FSMContext):
    await state.update_data(id_position = message.text)
    await state.get_data()
    await message.answer('—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')
    await state.set_state(StateUpdatePosition.new_name_position)
    
@router_admin_panel.message(StateUpdatePosition.new_name_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è
async def update_name_position_new_name(message: Message, state: FSMContext):
    await state.update_data(new_name_position = message.text)
    result = await state.get_data()
    await AsyncORMfunctin.update_name_position(result['id_position'], result['new_name_position'])
    await message.answer('–ò–º—è –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ')
    await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)
    await state.clear()
    
@router_admin_panel.callback_query(F.data == 'description_update') #–∏–∑–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
async def update_description_position(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StateUpdatePosition.id_position)
    await callback.message.answer('–•–æ—Ä—à–æ, –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–∑–∏—Ü–∏–∏')
    
@router_admin_panel.message(StateUpdatePosition.id_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º id
async def update_description_position_id(message: Message, state: FSMContext):
    await state.update_data(id_position = message.text)
    await message.answer('—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(StateUpdatePosition.new_description_position)
    
@router_admin_panel.message(StateUpdatePosition.new_description_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
async def update_description_position_new_description(message: Message, state: FSMContext):
    await state.update_data(new_description_position = message.text)
    result = await state.get_data()
    await AsyncORMfunctin.update_description_position(result['id_position'], result['new_description_position'])
    await state.clear()
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ')
    await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)
    
@router_admin_panel.callback_query(F.data == 'mass_update') #–∏–∑–º–µ–Ω—è–µ–º –º–∞—Å—Å—É
async def update_mass_position(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StateUpdatePosition.id_position)
    await callback.message.answer('–•–æ—Ä—à–æ, –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–∑–∏—Ü–∏–∏')
    
@router_admin_panel.message(StateUpdatePosition.id_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º id
async def update_mass_position_id(message: Message, state: FSMContext):
    await state.update_data(id_position = message.text)
    await state.get_data()
    await message.answer('—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—Å—Å—É')
    await state.set_state(StateUpdatePosition.new_mass_position)
    
@router_admin_panel.message(StateUpdatePosition.new_mass_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—É—é –º–∞—Å—Å—É
async def update_mass_position_new_mass(message: Message, state: FSMContext):
    await state.update_data(new_mass_position = message.text)
    result = await state.get_data()
    await AsyncORMfunctin.update_mass_position(result['id_position'], result['new_mass_position'])
    await state.clear()
    await message.answer('–ú–∞—Å—Å–∞ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ')
    await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)
    
@router_admin_panel.callback_query(F.data == 'praice_update') #–∏–∑–º–µ–Ω—è–µ–º —Ü–µ–Ω—É
async def update_praice_position(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StateUpdatePosition.id_position)
    await callback.message.answer('–•–æ—Ä—à–æ, –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–∑–∏—Ü–∏–∏')
    
@router_admin_panel.message(StateUpdatePosition.id_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º id
async def update_praice_position_id(message: Message, state: FSMContext):
    await state.update_data(id_position = message.text)
    await state.get_data()
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É')
    await state.set_state(StateUpdatePosition.new_praice_position)
    
@router_admin_panel.message(StateUpdatePosition.new_praice_position) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
async def update_praice_position_new_praice(message: Message, state: FSMContext):
    await state.update_data(new_praice_position = message.text)
    result = await state.get_data()
    await AsyncORMfunctin.update_praice_position(result['id_position'], result['new_praice_position'])
    await message.answer('–¶–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ')
    await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)
    await state.clear()
    
@router_admin_panel.callback_query(F.data == 'add_admin') #–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
async def add_admins(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ id\n\n\
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ')
    await state.set_state(StateNewAdmin.id_new_admin)
    
@router_admin_panel.message(StateNewAdmin.id_new_admin) #–ø—Ä–∏–Ω–∏–º–∞–µ–º id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
async def add_admins_id(message: Message, state: FSMContext):
    await state.update_data(id_new_admin = message.text)
    await message.answer('Good, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —á–∏—Å–µ–ª, –Ω–µ –±–æ–ª–µ–µ 9 —Ü–∏—Ñ—Ä')
    await state.set_state(StateNewAdmin.password_new_admin)
    
@router_admin_panel.message(StateNewAdmin.password_new_admin) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
async def add_admins_password(message: Message, state: FSMContext):
    await state.update_data(password_new_admin = message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø—Ä–∏–∫–æ–ª—å–Ω–æ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞)')
    await state.set_state(StateNewAdmin.name_new_user)
    
@router_admin_panel.message(StateNewAdmin.name_new_user) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –∏–º—è –¥–ª—è –∞–¥–º–∏–Ω–∞
async def add_admins_name(message: Message, state: FSMContext):
    await state.update_data(name_new_user = message.text)
    result = await state.get_data()
    await state.clear()
    await AsyncORMfunctin.insert_new_admin(int(result['id_new_admin']), int(result['password_new_admin']), result['name_new_user'])
    await message.answer('–ù–æ–≤—ã–π –∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup = inline_key.admin_panel_new)
    await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)
    
@router_admin_panel.callback_query(F.data == 'delet_admins') #—Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def delet_admins(callback: CallbackQuery):
    await callback.message.delete()
    result_id = await AsyncORMfunctin.select_admins_id()
    result_name = await AsyncORMfunctin.select_admins_name()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å', reply_markup = inline_key.create_keybord_admin(result_name, result_id, CreateNewCallbackDataAdmin))
    
@router_admin_panel.callback_query(CreateNewCallbackDataAdmin.filter()) #—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
async def create_new_callback_data_admin(callback: CallbackQuery, callback_data: CreateNewCallbackDataAdmin):
    await callback.message.delete()
    await AsyncORMfunctin.delet_admins(callback_data.number_admin)
    await callback.message.answer(f'id —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞: {callback_data.number_admin}\n\n–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üçíüçíüçí')
    await callback.message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∫–∞–∫—É—é-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—é ?', reply_markup = inline_key.admin_panel_new)